Известия Томского политехнического университета. 2004. Т. 307. № 6 В проектировании управляющих систем возника ет необходимость в генерации таких комбинаторных объектов, как перестановки и сочетания. Например, в задачах проектирования дискретных схем на базе программируемых больших интегральных схем с мат ричной структурой возникает задача генерирования всех допустимых в некотором смысле подмножеств заданного множества. Их генерацию можно вести па раллельно на вычислительных узлах многопроцес сорной системы. Для этого требуется задать нумера цию перечисляемых объектов так, что по номеру можно легко восстановить сопоставленный ему объ ект. Построенная таким образом нумерация позволя ет разбить все множество объектов на классы, мощ ности которых отвечают производительности про цессоров в системе, и генерировать объекты различ ных классов параллельно на соответствующих про цессорах. Предлагаются формулы вычисления номе ра заданного объекта (перестановки, сочетания) и ал горитмы построения объекта по его номеру. Генерация перестановок Рассматриваются перестановки (a1,…,an) из эле ментов множества N={1,2,…,n}, т.е. перестановки степени n. Известен алгоритм генерации (перечис ления) всех перестановок в лексикографическом порядке [1], т.е. так, что перестановка (a1,…,an) предшествует перестановке (b1,b2,…,bn), если для не ai+1<bi+1. Генерация выполняется путем преобразова ния текущей перестановки к следующей. Напри мер, перестановки степени 3 перечисляются в сле дующем порядке: 123, 132, 213, 231, 312, 321. Назовем индексом перестановки ее порядковый номер I в последовательности всех перестановок степени n, расположенных в лексикографическом ния индекса заданной перестановки и обратная ей − задача построения перестановки по ее индексу. Пер вую можно решить путем перечисления и последо вательной нумерации перестановок до тех пор, пока не будет получена заданная перестановка, что край не неэффективно. Предлагается вычислять индекс I перестановки (a1,…,an) по следующей формуле где ai′=ai+k и k −есть количество элементов aj та ких, что aj>ai и j<i. Пример. Пусть n=4, (a1,…,a4)=(2,3,1,4). Тогда: Покажем каким образом перестановку можно есть префикс перестановки с индексом I. Обозна чим Jt число перестановок, предшествующих всем перестановкам с префиксом A, и положим Mt=I−Jt. Назовем Mt кратностью префикса A. По определе нию M0=I и Mt есть число перестановок с префик сом A, индексы которых не превосходят I. Пусть Таким образом, зная индекс перестановки и любой ее префикс, можно вычислить кратность последнего. перестановки с индексом I и Mt−1 −его кратность. Пусть также {y1,...,yn−t+1}=N−{a1,...,at−1} и y1<...<yn−t+1. Тогда tй элемент at в перестановке с индексом I есть yk для множество всех перестановок с префиксом A=(a1,...,at−1,yk). Число перестановок в нем |Ck|=(n−t)!. Ввиду yk<yk+1 все перестановки в Ck предшествуют всем перестановкам в Ck+1. Множества C1,C2, …,Cn−t+1 образуют разбиение множества всех перестановок с префиксом (a1,...,at−1), и перестановка с индексом I входит в одно из них. Пусть J обозначает число всех перестановок, предшествующих перестановкам с этим префиксом. Тогда Mt−1=I−J, и индексы всех пе рестановок в Ck суть J+(k−1)(n−t)!+1, J+(k−1)× При и at=yk. Прибавив ко всем частям последнего нера венства величину (n−t)!−1, получим (k−1)(n−t)!+ i n УДК 519.2 О НУМЕРАЦИИ ПЕРЕСТАНОВОК И СОЧЕТАНИЙ ДЛЯ ОРГАНИЗАЦИИ ПАРАЛЛЕЛЬНЫХ ВЫЧИСЛЕНИЙ В ЗАДАЧАХ ПРОЕКТИРОВАНИЯ УПРАВЛЯЮЩИХ СИСТЕМ Н.Е. Тимошевская Томский государственный университет Предложен метод параллельной генерации таких комбинаторных объектов, как перестановки и сочетания. В основе метода ле! жит возможность нумерации перечисляемых объектов так, что по номеру можно легко восстановить сопоставленный ему объект. Приведены формулы вычисления номера заданного объекта (перестановки, сочетания) и алгоритмы построения объекта по его номеру. Представлены результаты экспериментов, подтверждающие эффективность метода.

Естественные науки Следовательно, Теорема 1 доказана. При известном префиксе (a1,...,an−1) перестанов ки с индексом I ее последний член находится как единственный элемент множества N−{a1,...,an−1}. Пример. Пусть n=4. Построим перестановку (a1, a2, a3, a4) по индексу I =9. t=1: M0=9, Y={1, 2, 3, 4}, k=2; следовательно, a1=2. вательно, a2=3. тельно, a3=1. t=4: Y={4}; следовательно, a4=4. В результате получаем перестановку (2, 3, 1, 4). Данный метод вычисления перестановки (a1,...,an) по ее индексу I можно выразить следую щим алгоритмом. Алгоритм 1 (вычисление перестановки (a1,...,an) по индексу I) 2. Если t=n, то п. 5; иначе и 4. I=I−(k−1)(n−t)!; t=t+1 перейти к п. 2. Реализация алгоритма 1 предполагает исполь зование "больших" чисел (целых чисел, двоичное представление которых требует большего числа разрядов, чем в стандартных типах) для задания индекса. Вместе с тем, опираясь на него, можно предложить следующий алгоритм параллельной ге нерации перестановок. Пусть требуется построить все перестановки сте пени n на однородной многопроцессорной вычисли тельной системе, состоящей из p одинаковых про цессоров с общей или распределенной памятью. Максимальную загруженность процессоров можно обеспечить, разделив последовательность всех пе рестановок на блоки по s=[n!/p] элементов в каждом. Блок с номером m начинается с перестановки, соот ветствующей индексу I=s(m−1)+1, и генерация пе рестановок в нем возлагается на mй процессор. Ес ли число всех перестановок не кратно p, то процес сор, генерирующий перестановки последнего блока, строит также (n! mod p) оставшихся перестановок, число которых меньше p. При выполнении этого ал горитма отсутствует взаимодействие между процес сорами, и все процессоры одинаково загружены, что позволяет добиться ускорения (величина, показыва ющая, во сколько раз параллельный алгоритм рабо тает быстрее последовательного) близкого к p. Описанный параллельный алгоритм обладает высокой эффективностью благодаря пропорцио нальному распределению вычислений и отсут ствию обменов данными между процессорами. Предложенный алгоритм был реализован с по мощью технологии параллельного программирова ния MPI (Message Passing Interface), предназначен ной для организации параллельных вычислений в системах с распределенной памятью, и исследован в эксперименте на однородной многопроцессор лены результаты вычислительного эксперимента, из которых следует, что средняя эффективность ис пользования системы алгоритмом равна 0,94. Ускорение для алгоритма параллельной генерации перестановок степени n, достигаемое при использо! вании 2, 3, …, 16 процессоров Генерация сочетаний Здесь под сочетанием понимается всякое упоря доченное по возрастанию kэлементное подмноже ство nэлементного множества N={1, 2, …, n}, т.е. понентами в N, называемый также сочетанием из n по k, в котором bi<bi+1 для i=1, …, k−1. В [2] описан алгоритм генерации сочетаний, в котором сочета ния порождаются в лексикографическом порядке, т.е. так, что сочетание (b1, b2, …, bk) предшествует со имеет место b1=a1, b2=a2, …, bi=ai и bi+1<ai+1. Напри мер, все сочетания из 5 по 3 перечисляются в следу ющем порядке: (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), Индексом сочетания назовем порядковый номер I этого сочетания в последовательности всех соче таний, расположенных в лексикографическом по k. Индекс I сочетания (b1, b2, …, bk) из n по k может быть вычислен по следующей формуле: Пример. Вычислим индекс сочетания (2, 4, 5) из 5 по 3. Рассмотрим теперь, как сочетание (b1,b2,…,bk) строится по его номеру I. и 0=b0<b1<b2<…<bt−1. Для любого j в {bt−1+1,bt−1+2,..., n−k+t}, через sj t обозначим число всех сочетаний с 2 1 4 1 5 1 0 1 2 1 4 1 1 6 где и k i j b

Известия Томского политехнического университета. 2004. Т. 307. № 6 В каждом из этих сочетаний недостающие k−t эле ментов берутся из n−r элементов r+1,…,n, поэтому sj . Положим также st= . Это есть чис ло всех сочетаний с префиксами (b1,b2,...,bi−1,ai) для щих сочетаниям с префиксом (b1,b2,...,bt−1). фикс сочетания с индексом I; тогда tй элемент bt этого сочетания равен наименьшему из таких j, что j+1, если такие j существуют, и bt=n−k+t в противном случае. Доказательство. Для любого j, где bt−1<j<n−k+t, введем Ij=st+st j. По определению st и st j есть число всех сочетаний, предшествующих сочетаниям с префиксом (b1,b2,...,bt−1,j), т.е. Ij является индексом последнего сочетания с префиксом (b1,b2,...,bt−1,j−1), а Ij+1 −индексом последнего сочетания с префик сом (b1,b2,...,bt−1,j). Рассмотрим возможные случаи, 1. Не существует такого j, что bt−1<j<n−k+t. Тогда 2. Для всех j, где bt−1<j<n−k+t, имеет место I >Ij+1. В этом случае bt>j для всякого j в границах bt−1<j<n−k+t и потому bt=n−k+t. 3. Существуют j с ограничениями bt−1<j<n−k+t и Теорема 2 доказана. Пример. Построим сочетание из 5 по 3 с индек сом I=9. следовательно, b2=4. t=3: не существует j для 4=bt−1<j<n−k+t=5, поэтому В результате получаем сочетание (2, 4, 5). Данный метод вычисления сочетания из n по k по его индексу I можно выразить следующим алго ритмом. Алгоритм 2 4. Если j<n−k+t и s+Cn−j k−t<I, то п. 5, иначе п. 6. 8. (b1, …, bk) −искомое сочетание. Параллельная генерация сочетаний осущес твляется так же, как и перестановок, а именно: все множество сочетаний делится на блоки, мощности которых отвечают производительности процессо ров в системе; в каждом блоке по алгоритму 2 с по мощью индекса вычисляется первое сочетание, на чиная с которого один из процессоров системы ге нерирует сочетания всего блока. Как и в случае пе рестановок, благодаря пропорциональному расп ределению вычислений и отсутствию обменов дан ными между процессорами, параллельный алго ритм обладает высокой эффективностью. где изображен график усредненного значения ускоре ния, полученного в примерах со следующими парамет няя эффективность использования системы (отноше ние ускорения к числу процессов) равна 0,87. Среднее ускорение для алгоритма параллельной ге! нерации сочетаний, достигаемое при использовании 2, 3, …, 16 процессоров Отметим, что в случае генерации сочетаний эф фективность распараллеливания меньше, чем в случае генерации перестановок. Причина этого в том, что время, требуемое на построение блока со четаний, зависит от того, какие именно сочетания в нем генерируются. В ходе эксперимента также было установлено, что процессоры, генерирующие сочетания первых блоков, заканчивают работу немного быстрее, чем процессоры, генерирующие сочетания последних блоков. Таким образом, при генерации сочетаний с большими индексами тре буется, как правило, больше операций, и поэтому блоки одинакового размера могут строиться за раз личное время, однако для практических приложе ний эта разница не существенна. Полученные в эксперименте значения коэффи циентов эффективности 0,94 и 0,87, соответственно для алгоритмов генерации перестановок и сочетаний, подтверждают хорошую масштабируемость прог рамм, то есть сохранение тенденции уменьшения времени работы при увеличении числа процессоров. k t n r r b СПИСОК ЛИТЕРАТУРЫ Дейкстра Э. Дисциплина программирования. −М.: Мир, 1978. Липский В. Комбинаторика для программистов. −М.: Мир,