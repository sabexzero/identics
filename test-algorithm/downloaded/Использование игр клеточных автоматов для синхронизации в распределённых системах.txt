БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. История развития теории клеточных автоматов Т ермин «клеточные автоматы» стал приме няться в середине XX в. для обозначения совокупности зависимых элементов с задан ными состояниями и правил, в соответствии с ко торыми состояния этих элементов и зависимости между ними изменяются во времени. Время и со стояния при этом дискретны. Использование опи санной выше модели для формального моделирова ния самовоспроизводящихся организмов впервые предложено в работе Фон Неймана [1]. Элементы клеточных автоматов предложено выстроить в од номерные или двухмерные бесконечные прямоу гольные таблицы. Состояние элемента изменяется в зависимости от его состояния и от состояния двух (или четырех – для двухмерного случая) ближай Клеточные автоматы в силу своей дискретности сравнительно просто моделируются при помощи ЭВМ и благодаря этому, в 50–70е гг. XX в. приоб ретают популярность. Исследователи различных научных областей изучают и используют клеточные автоматы с разнообразными свойствами для раз личных целей. В это время выходят основные тру ды, заложившие базис для общей теории клеточных автоматов. В 1970 г. Bruks [2] в книге «Essays on Cellular Auto mata» изложил основные термины и положения по этой теме, обобщив множественные теоретические исследования на тот период. В дальнейшем теория разносторонне изучена и расширена Аладьевым [3] (1974 г.), Smith [4] (1976 г.), Vollmar [5] (1977 г.). В этих и других работах изложена «классическая» теория клеточных автоматов – общие положения, теоремы и закономерности, верные для всех направлений ис следований на тот период. Примерно в то же время появились игры для клеточных автоматов – математические модели, имеющие в основе игровое описание. Например, игра «Firing Squad» – задача об одновременном зал пе всего орудийного расчёта имеет в основе важную задачу синхронизации [6], а игра «Game of Life» со держит в себе модель поведения популяции в одно родной среде [7]. Благодаря своей гибкости и универсальности, клеточные автоматы нашли признание в теории искусственного интеллекта, в самовоспроизводя щихся моделях, микро и макробиологии, вычи слениях в среде с возможностью сбоев, в системах М.В. Поникаров, руководитель проекта, ЗАО «Датавижн СНГ», Нижний Новгород Рассмотрена игра клеточных автоматов «FireSquad» с точки зрения применения в качестве формальной модели синхронизации действий в распределённых программных системах. Описаны эвристики, позволяющие сократить пространство вариантов при поиске минимального локального правила. ИСПОЛЬЗОВАНИЕ ИГР КЛЕТОЧНЫХ АВТОМАТОВ ДЛЯ СИНХРОНИЗАЦИИ В РАСПРЕДЕЛЁННЫХ СИСТЕМАХ Ðèñ. 1. Схема двухмерного расположения элементов клеточного автомата

БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. распознавания языка и изображений, в распреде лённых системах в условиях «информационного голодания». Начиная с 80х гг. XX в. изучение клеточных автоматов приняло более специализированный оттенок. На базе общей теории создаются и изуча ются различные конфигурации клеточных автома тов для конкретных исследовательских областей. Благодаря разносторонним исследованиям, уда лось создать мощную математическую теорию, на правленную на классификацию и изучение свойств различных моделей. В 1983 г. Wolfram издал свою первую работу [8] по статистическим параметрам клеточных автома тов. В дальнейшем Wolfram развил математические аспекты этой теории [9], что позволило ему и дру гим исследователям подробно классифицировать и изучить практически всё множество клеточных автоматов. Классификация и свойства клеточных автоматов Для получения различных конфигураций кле точных автоматов, принято варьировать следующи ми параметрами: ✧состояния элементов. В каждый момент време ни каждый элемент клеточного автомата имеет одно из конечного набора состояний. В зависи мости от этих состояний в следующий момент времени набор элементов может принять новое состояние. Если для элементов клеточного автомата множества возможных состояний раз личны, такой клеточный автомат называется полигенным. Но на практике используются ячейки с эквивалентными множествами воз можных состояний с алгебраической структу рой – линейные клеточные автоматы; ✧геометрия. Элементы могут быть геометриче ски расположены различным образом. Размер ность пространства может быть произвольной, а число элементов – как бесконечным, так и конечным. В последнем случае возникает до полнительная степень свободы в граничных условиях. Они могут быть различными, но на практике используются постоянные во време ни (чаще всего – нулевые) или периодические граничные условия. В динамических клеточных автоматах геометрия может изменяться со вре менем, а если геометрия различна на различ ных участках пространства, такие клеточные автоматы называют неоднородными; ✧соседство. Соседи – это элементы, от которых зависит элемент клеточного автомата. Состоя ние элемента в следующий момент времени вычисляется из состояния самого элемента и его соседей. Соседство в большой степени определяется геометрией клеточного автомата. Для различных целей возможно изменение чи сла входных состояний элемента. Если для каждого элемента клеточного автомата число входов и выходов одинаковое, такой клеточ ный автомат называется сбалансированным; ✧локальное правило. В соответствии с локаль ным правилом изменяется состояние элемента клеточного автомата в течение времени. Кле точный автомат, в котором локальные правила различны для различных элементов, называет ся разнородным. Локальное правило может быть недетерминированным, т.е. изменяться во времени или иметь случайную природу. Варьируя заданные параметры, можно получить клеточные автоматы необходимой конфигурации. Гибкость конфигурации и универсальность вычисле ния обеспечили высокую популяризацию клеточных автоматов в различных сферах. Произвольность в вы боре параметров конфигурации очень удобна для ис пользования, но это придаёт дополнительную слож ность в классификации и систематизации знаний теории клеточных автоматов. Тем не менее, наиболее используемо на практике лишь небольшое семейство конфигураций клеточных автоматов. Как правило, каждый из них имеет своё название. Здесь приведён лишь небольшой список наиболее используемых вариантов конфигураций: ✧мозаичный автомат [10]. Клеточный автомат, использующий в локальном правиле каждого элемента не только состояние элемента и его соседей, но и значение общего входного пара метра, который может изменяться со време нем. Изменение этого параметра ведёт к сме не набора правил смены состояний во всём пространстве элементов клеточного автомата. Если из какоголибо начального состояния можно привести клеточный автомат в любую заданную конфигурацию путём варьирования значением общего входного параметра, кле точный автомат называют полным; ✧итеративный автомат [11]. Клеточный авто мат, в котором лишь один элемент использует для изменения своего состояния значение входного параметра; ✧односторонний клеточный автомат [12]. Та кой автомат допускает лишь одностороннее взаимодействие элементов. Например, в од номерном массиве элементов значение каж дого элемента зависит лишь от его состояния

БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. и от состояния левого (или правого) соседа. Несмотря на кажущееся вырождение обычно го клеточного автомата, односторонние кле точные автоматы достаточно универсальны и используются для распознавания языковых форм; ✧Лсистема [13]. Этот тип клеточных автоматов используется для моделирования биологиче ских систем. Это динамические клеточные автоматы (как правило, одномерные или дву мерные), в которых с течением времени один элемент может заменяться несколькими или может быть удалённым из системы в соответ ствии с заданными правилами; ✧отказоустойчивая система [14]. В таких систе мах моделируется работа клеточных автоматов в реальных условиях: с некоторой вероятно стью каждый элемент клеточного автомата может перейти в состояние, не соответствую щее локальному правилу. Задачей является создать алгоритмы, для которых работа кле точного автомата будет верной вне зависимо сти от допущенных ошибок. Существуют вспомогательные свойства клеточ ных автоматов, описывающие важные характери стики таких систем. Эти свойства позволяют ввести более детальную классификацию множества кле точных автоматов. Клеточный автомат называют инвертируемым, если существует набор локальных правил, позво ляющий однозначно привести клеточный автомат из любого состояния в предыдущее. То есть, если по текущему состоянию всех элементов клеточного ав томата можно определить его состояние в предыду щий момент времени. Состояние всех элементов клеточного автомата (конфигурация клеточного автомата) называется «Райским садом», если такая конфигурация может возникнуть только лишь как начальное значение в любой эволюции клеточного автомата. Отсутствие такой конфигурации означает, что данный клеточ ный автомат – эпиморфный. Игры для клеточных автоматов Наряду с практическими моделями, клеточные автоматы могут быть использованы для создания игровых моделей. Игры в большинстве своем пред ставляют лишь более наглядное представление серьёзных практических задач, а изучение игровых проблем позволяет получить более разностороннее и глубокое понимание теории клеточных автоматов в целом. Широко известна игра «Game of Life», моделирующая макроскопическое поведение попу ляции в однородной среде. Наше внимание привлекла игра «Fire squad». Это задача, требующая составить локальное прави ло, одинаковое для каждого элемента одномерного клеточного автомата, удовлетворяющее условиям игры. В оригинальном описании игры n солдат (один из них – генерал) становятся в одну шеренгу. Каж дый солдат может общаться лишь с правым или ле вым соседом. Генерал даёт команду «старт». Через некоторое время каждый солдат и генерал должны выстрелить одновременно и при этом каждый – в первый раз. В терминах теории клеточных автоматов, для n элементов, расставленных в ряд и имеющих в каче стве соседа лишь правый и левый ближайший эл емент, определить общее локальное правило (не за висящее от n), в результате которого клеточный ав томат придёт из заданной начальной конфигурации в требуемую. Начальная конфигурация: все элемен ты имеют «выключенное» состояние (например, «0»), кроме одного – в состоянии «старт» (напри мер, «1»). Требуемая конфигурация: все элементы в состоянии «огонь» (например, – «2»). При этом ни один элемент в промежуточных конфигурациях Ðèñ. 2. Игра «Fire squad». Начальное и требуемое состояние Как видно, данная задача – это задача синхро низации. Она может быть применена в различных прикладных областях. Основная сложность – в неопределённости числа элементов клеточного ав томата – солдат. В общем случае задача многомерная, и генера лом может быть любой элемент. Обычно генерал – это один из крайних элементов клеточного автома та. Граничные условия могут быть различны, но принято использовать нулевые граничные условия: крайние элементы используют неизменные ну левые значения состояний несуществующих эле ментов.

БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. Для двухмерной задачи в начальном состоянии «0» находится n⋅m–1 элементов, образующие n Генерал может располагаться в произвольном ме сте. Каждый элемент имеет по 4 соседа. Наиболее популярное решение этой задачи нашёл Minsky [18] – данное решение содержит достаточно много воз можных состояний элементов клеточного автомата (99), но обладает важным свойством – такой кле точный автомат инвертированный. Количество шагов, за которое клеточный автомат приходит к состоянию «залпа» равно 3⋅n. Решение для dмерной задачи долгое время изу чал Szwerinski [19]. Он нашёл решение задачи «Firing squad» с 25 возможными состояниями элементов клеточного автомата. Практический интерес заключается в минимиза ции количества временных шагов, предшествующих залпу и (или) минимизации возможных состояний элементов в зависимости от конфигурации клеточ ных автоматов. Возможности прикладного применения теории клеточных автоматов Требование динамической интеграции разнород ных компонент в составе единого вычислительного комплекса заставляет вести разработку открытых программных архитектур, включающих большое ко личество распределённых программных подсистем. Наиболее известными практическими примерами таких архитектур являются многоагентные системы [20, 21] и сети с равноправным правом на хранение информации [22] (peertopeer, P2P). Среди современных теоретических разработок можно указать на направление аморфных вычисле ний. По мнению авторов [23], в течение ближайших десятилетий две основные нанотехнологии: микро производство (microfabrication) и клеточная инжене рия – сделают возможным создание систем, вклю чающих мириады очень дешёвых устройств, способ ных вести обработку различной информации. При чем не обязательно от всех таких устройств требовать гарантии безошибочной работы и определения их точного взаиморасположения в пространстве. Такое изменение технологии приведёт к фундаментально му изменению методов создания и программирова ния компьютеров, а также само наше представление о вычислениях. Реализация когерентного поведения большого числа независимых вычислительных сущностей, будь то агенты в многоагентной системе или узлы сети P2P, требует разработки строгих формальных методов для управления транзакциями, принятия коллективных решений и т.д. В независимости от физического размещения отдельных компонентов, их программной реализации разработчик должен быть уверен, что их совместное поведение приведёт к требуемым результатам. Нами исследована возможность использования формальной модели игры «FireSquad» в качестве та кого строгого формального метода координации поведения большого числа независимых програм мных сущностей. Подходы к ограничению сложности задачи нахождения требуемого локального правила в игре «FireSquad» На практике получение локального правила, необходимого для требуемого поведения клеточно го автомата нетривиально. Производительность современных вычислительных машин позволяет составлять программы, которые перебором конеч ного числа вариантов находят локальные правила, удовлетворяющие поставленным критериям. Рассмотрим основные приемы оптимизации пе реборной стратегии для игры «Firing squad». Интерес представляет минимизация числа возможных со стояний элементов, числа возможных ситуаций для элемента (состояние самого элемента и его соседей) и количества временных интервалов до залпа. Данная проблема исследуется около 50 лет. В 1957 г. эта задача сформулирована Myhill, а впер вые упомянута в изданиях Moore [15]. Очевидно, что минимальный период до залпа равен T = 2n–1: «сигнал» должен дойти от генерала до конечного элемента клеточного автомата и обратно, иначе ал горитм не сможет определить число элементов в клеточном автомате. Простые, но в тоже время мед ленные алгоритмы производят залп за T = 3n шага. Минимизация возможных состояний – более сложная задача – решается на протяжении всего времени существования этой задачи. В 1966 г. Waks man [16] опубликовал решение одномерной задачи для 16 состояний элементов. В 1967 г. Balzer умень шил зто число до 8. В 1987 году Mazoyer [17] нашёл решение этой задачи для 6 используемых состоя ний. Оценку снизу получил Balzer. Он доказал, что решение поставленной задачи невозможно для кле точных автоматов с 4 и менее используемыми со стояниями. Сложность получения минимального набора со стояний объясняется большой вычислительной сложностью. Для однозначного определения локаль ного правила для клеточного автомата с k используе мыми состояниями необходимо определить kk3пове дения элементов (новое состояние в зависимости

БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. от текущего состояния элемента и его соседей). Для k = 3 это число превосходит 1012. При этом каждый из полученных вариантов необходимо проверить на клеточном автомате, что потребует как минимум T⋅n операций. Такая задача посильна лишь супер ЭВМ. В ходе работы нами определён ряд эвристик, по зволяющих сократить рассматриваемое количество вариантов. Пусть требуется найти локальное правило, удо влетворяющее задачу «Fired squad» для заданного числа элементов n и числа используемых состояний k. Пусть генерал стоит первым в строю. Локальное правило описывается функцией F(x, y, z), которая возвращает значение нового состояния элемента (0,1,..., k–1) в зависимости от текущих состояний элемента (x = 0,1,..., k–1) и состояний его соседей (y = 0,1,..., k–1 и z = 0,1,..., k–1). Известно, что F(0, 0, 0) = 0. Значение функции в других точках необходимо подобрать. В начальном состоянии необходимо определить лишь два значения функ ции для перехода в следующее состояние: И так далее. Для определения всего множества конфигураций клеточного автомата до залпа необходимо определить лишь требуемую часть зна чений функции. На каждом шаге необходимо опре делить лишь 1–4 значений (с течением времени это число уменьшается). Определив, что число шагов до залпа не должно превышать 3n, получаем снижение числа перебираемых локальных правил порядка k8n. Также получается выгода: можно найти все воз можные локальные правила для заданного n и затем проверять и дополнять полученный набор на n+1 и так далее. Начав с небольшого n (например, n = 5) можно существенно снизить объём вычислений, а также упростить распределение задачи для парал лельного вычисления на нескольких машинах, за писывая промежуточный набор локальных правил в файл и считывая его (или часть) на других ЭВМ. Состояние «2» можно не использовать вовсе. Так как все солдаты должны выстрелить одновременно, можно отслеживать благоприятный момент для залпа: если в определённый момент времени для определения состояния каждого элемента в сле дующий момент времени необходимо определить новое значение функции, все эти значения можно определить как «2». Благодаря описанным оптимизациям макси мальное число вариантов можно определить как где А – число перебираемых вариантов для других n с уже известным неполным набором правил. Для n > 3 число перебираемых вариантов все ещё остается значительным. Существует ряд опти мизаций, существенно влияющих на скорость на хождения искомого локального правила: 1. Нет смысла определять значение функции F(x, y, z) > p, если все предыдущие определённые значения этой функции в других точках не превос ходят p более чем на 1 (например, для рисунка 3: 2. Можно обрывать перебор значений функции на шаге 2n в случае если к этому моменту времени крайне правый элемент ни разу не изменил своего состояния: в этом случае полученный алгоритм не зависит от числа n: крайне левый элемент не успеет получить информацию от крайне правого элемента. 3. Можно ограничить число определённых зна чений функции F(x, y, z), если это не противоречит поставленной задаче. Подавляющее число перебираемых вариантов практически сразу ведёт к затуханию активности клеточного автомата, что приводит к качественно му снижению объёма вычислений. Например, при использовании предложенных оптимизаций итого вое число перебираемых вариантов для n = 4 полу чилось порядка 10 миллиардов, что удовлетворяет производительности современного персонального компьютера. Оценка каждого варианта занимает порядка 10000 элементарных операций процессора. Таким образом, время перебора с использованием одного персонального компьютера (процессор Athlon, 1000 мегагерц) для данного варианта зани мает около 30 часов. Ðèñ. 3. Изменение конфигурации клеточного автомата с течением времени

БИЗНЕСИНФОРМАТИКА №3(05)–2008 г. Таким образом, с появлением высокопроизво дительных ЭВМ появилась реальная возможность создавать клеточные автоматы с необходимой кон фигурацией, обладающие параметрами, оптимизи рованными для практической реализации в соот ветствии с поставленной задачей. Выводы В современных распределённых программных системах требуется использование формальных подходов к выработке единого коллективного ре шения среди большого количества независимых программных сущностей. В данной работе исследо ваны возможности теории клеточных автоматов и их приложений для разработки таких формальных методов. Модель игры «FireSquad» может служить основой для исследований в этом направлении. Несмотря на большую вычислительную сложность задачи прямого поиска минимальных локальных наборов правил, применение эвристик, получен ных в данной работе, позволяет решать задачу для простейших конфигураций за практически прие млемое время. Однако для использования модели игры «Fi reSquad» в качестве базового алгоритма координа ции в распределённых системах требуется решение большого числа проблем. Среди таких проблем ука жем лишь на необходимость обобщения игры на случай случайного расположения клеток автомата на плоскости. При этом соседями каждой клетки становятся те, которые находятся в круге некоторо го радиуса r. Такая конфигурация типична для аморфных вычислений, однако непосредственное применение известных решений для одномерного и двумерного случая игры «FireSquad» здесь невоз можно. ■