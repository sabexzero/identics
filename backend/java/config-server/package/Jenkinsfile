pipeline {
    agent any
    environment {
        DOCKER_IMAGE = credentials('CONFIG_SERVER_IMAGE_NAME')
		PORT = credentials('CONFIG_SERVICE_PORT')
    }
    stages {
		stage('Build') {
			steps {
				script {
					// Если Gradle, используем эту команду
					sh './gradlew -p backend/java/config-server clean build -x test'
				}
			}
		}
		stage('Build and push Docker Image') {
            steps {
                script {
                    // Используем credentials
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Пример использования логина и пароля
                        sh 'echo "Logging in to Docker"'
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        
                        // Дальше вы можете строить образ или выполнять другие команды
                        sh "docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}"
                    }
                }
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                script {
                    echo "Deployment to the test server was successful."
						withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Пример использования логина и пароля
                        sh 'echo "Logging in to Docker"'
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        
                        // Дальше вы можете строить образ или выполнять другие команды
                        sh "docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE}"
						sh """
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                            sudo docker stop ${DOCKER_IMAGE} || true
							sudo docker rm ${DOCKER_IMAGE} || true
							
                            sudo docker pull ${DOCKER_USERNAME}/${DOCKER_IMAGE}"
                            sudo docker run -d --name ${DOCKER_IMAGE} -p ${PORT}:${PORT} -e SPRING_PROFILES_ACTIVE=dev ${DOCKER_IMAGE}
                    }
                }
            }
        }

        stage('Approval for Production Deployment') {
            steps {
                input message: 'Do you want to deploy to production?', ok: 'Deploy'
            }
        }

        stage('Deploy to Production Environment') {
            steps {
                script {
                    echo "Deployment to production servers was successful."
                }
            }
        }
        }
    }
}